# -*- coding: utf-8 -*-
"""exp01_IPCV-practice01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SgRNw5HHw2UlIO7xHG09EgcEbGiH5a8e
"""

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
import random
import matplotlib.pyplot as plt
from keras.datasets import fashion_mnist
from keras.datasets import mnist
from keras.datasets import cifar10
from PIL import Image

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
# (x_train, y_train), (x_test, y_test) = mnist.load_data()
# (x_train, y_train), (x_test, y_test) = cifar10.load_data()

# TASK 1

def read_random_image(digit):
  indices = np.where(x_train==digit)[0]
  random_number = random.choice(indices)
  return x_train[random_number]

sample_img = read_random_image(4)
plt.imshow(sample_img)

# TASK 2 - CONVERT IMG TO GRAYSCALE

plt.imshow(sample_img, cmap='gray')

# TASK 3 - IMG CROPPING

def cropping(image,x,y,width,height):
  return image[x:x+width, y:y+height]

my_image_02 = read_random_image(11)
plt.imshow(my_image_02, cmap = 'gray')

cropped_image = cropping(my_image_02, 10, 20, 15, 30)
plt.imshow(cropped_image)

my_image = plt.imread(r"/content/IMG_4856 - frame at 0m1s.jpg")
plt.imshow(my_image)

cropped_img = cropping(my_image, 1000, 2000, 400, 400)
plt.imshow(cropped_img)

def display_image(before, after, before_title, after_title):
  plt.subplot(1,2,1)
  plt.imshow(before, cmap='gray')
  plt.title(before_title)
  plt.subplot(1,2,2)
  plt.imshow(after, cmap='gray')
  plt.title(after_title)
  plt.show()

# TASK 4 - ARITHMETIC OPERATION ( + - / *)

img1 = read_random_image(23)
img2 = read_random_image(56)

def add(img1, img2):
  return np.clip(img1+img2, 0, 255).astype(np.uint8)

def subtract(img1, img2):
  return np.clip(img1-img2, 0, 255).astype(np.uint8)

def multiply(img1, img2):
  return np.clip(img1*img2, 0, 255).astype(np.uint8)

def division(img1, img2):
  return np.clip(img1/(img2+0.0001), 0, 255).astype(np.uint8)

display_image(img1, img2, "image 01", "image 02")

added_image = add(img1, img2)
plt.imshow(added_image, cmap='gray')
plt.title("Added Image")

display_image(img1, img2, "image 01", "image 02")

subtracted_image = subtract(img1, img2)
plt.imshow(subtracted_image, cmap='gray')
plt.title("subtracted Image")

display_image(img1, img2, "image 01", "image 02")

multiply_image = multiply(img1, img2)
plt.imshow(multiply_image, cmap='gray')
plt.title("Multiply Image")

display_image(img1, img2, "image 01", "image 02")

div_image = division(img1, img2)
plt.imshow(div_image, cmap='gray')
plt.title("Divison Image")

my_img_01 = plt.imread(r"/content/IMG_4856 - frame at 0m1s.jpg")
my_img_02 = plt.imread(r"/content/IMG_4840 - frame at 0m12s.jpg")
display_image(my_img_01, my_img_02, "Img01", "Img02")

added = add(my_img_01, my_img_02)
plt.imshow(added)

sub = subtract(my_img_01, my_img_02)
plt.imshow(sub)

product = multiply(my_img_01, my_img_02)
plt.imshow(product)

div = division(my_img_01, my_img_02)
plt.imshow(div)

# TASK 05 - LOGICAL OPERATIONS

def logical_operation(img1, img2):
  and_result = np.bitwise_and(img1, img2).astype(np.uint8)
  or_result = np.bitwise_or(img1, img2).astype(np.uint8)
  not_result = np.bitwise_not(img1).astype(np.uint8)
  xor_result = np.bitwise_xor(img1, img2).astype(np.uint8)
  return and_result, or_result, not_result, xor_result

and_result, or_result, not_result, xor_result = logical_operation(img1, img2)
display_image(img1, img2, "Image 1", "Image 2")
display_image(and_result, or_result, "AND", "0R")
display_image(not_result, xor_result, "NOT", "X0R")

and_result, or_result, not_result, xor_result = logical_operation(my_img_01, my_img_02)
display_image(my_img_01, my_img_02, "Image 1", "Image 2")
display_image(and_result, or_result, "AND", "0R")
display_image(not_result, xor_result, "NOT", "X0R")

# TASK 06 - ARITHMETIC BLENDIND

def arithmetic_blending(img1, img2, alpha):
  blended_img = ((img1 * alpha) + (img2 * (1 - alpha))).astype(np.uint8)
  return blended_img

blended_img_01 = arithmetic_blending(img1, img2, alpha = 0.5)
display_image(img1, img2, "img1", "img2")
plt.imshow(blended_img_01, cmap='gray')
plt.title("Arithmetic Blended Image")

blended_img_01 = arithmetic_blending(my_img_01, my_img_02, alpha = 0.5)
display_image(my_img_01, my_img_02, "img1", "img2")
plt.imshow(blended_img_01, cmap='gray')
plt.title("Arithmetic Blended Image")

# TASK 07 - BITSHIT LEFTSHIFT AND RIGHTSHIFT

def bitshit_leftshift(img, left_shift_value):
  shifted_image = np.left_shift(img, left_shift_value).astype(np.uint8)
  return shifted_image

def bitshit_rightshift(img, right_shift_value):
  shifted_image = np.right_shift(img, right_shift_value).astype(np.uint8)
  return shifted_image

left_shift_value = 4
right_shift_value = 4

left_shifted_img = bitshit_leftshift(img1, left_shift_value)
right_shifted_img = bitshit_rightshift(img1, right_shift_value)

plt.imshow(img1, cmap='gray')

display_image(left_shifted_img, right_shifted_img, "Left Shifted Image", "Right Shifted Image")

